!<arch>
//                                              98        `
Productor_consumidor_definitivo.cpp/
Filosofos_definitivo.cpp/
Filosofos_camarero_definitivo.cpp/
/0              1390554660  1000  1000  100664  4165      `
#include "mpi.h"
#include <stdlib.h>
#include <iostream>
#include <time.h>
#include "math.h"

#define Buffer 5
#define Productor  4
#define Consumidor 6
#define ITERS 20
#define TAM 5

using namespace std;

void buffer(){
	int dato[TAM], hilo, pos=0, peticion;
 	MPI_Status status;
 	for (unsigned int i=0;i<ITERS*2;i++){  /*El bucle recorre ITERS*2 dado que tiene que recibir ITERS mensajes de los productores y*/
   		if (pos==0){			/*y debe enviar de forma síncrona ITERS mensajes a los consumidores*/	
			hilo=0;		//El consumidor no puede consumir (estado inicial gracias a pos=0)
			MPI_Probe(MPI_ANY_SOURCE,0, MPI_COMM_WORLD,&status);
		}
   		else if (pos==TAM){ 
			hilo=1;		// El productor no puede producir (buffer lleno, no puede recibir más datos)
			MPI_Probe(MPI_ANY_SOURCE,4, MPI_COMM_WORLD,&status);
		}
   		else{  			//Ambas guardas son ciertas (buffer ni vacío ni lleno, puede hacer ambas cosas)
			MPI_Probe(MPI_ANY_SOURCE, MPI_ANY_TAG, MPI_COMM_WORLD, &status);
      			if (status.MPI_SOURCE>=0 && status.MPI_SOURCE<=4) //Si el proceso con el cual estoy entrando en éste condicional 
				hilo=0;                                   // es un consumidor, entonces hilo=0 
			else 
				hilo=1;                                   //sino, entonces es un productor, luego hilo=1
   		}
   		switch(hilo){
     			case 0:
				MPI_Recv(&dato[pos],1,MPI_INT,status.MPI_SOURCE,0,MPI_COMM_WORLD,&status);

       				cout<< "Buffer recibe del Prodcutor "<<flush<< "el valor" << dato[pos];  
       				pos++;
       			break;
     			case 1:
       				MPI_Recv( &peticion, 1, MPI_INT, status.MPI_SOURCE , 4, MPI_COMM_WORLD,&status);

       				MPI_Ssend( &dato[pos-1], 1, MPI_INT, status.MPI_SOURCE, 6 , MPI_COMM_WORLD);
       				cout<< "Buffer envía al Consumidor "<<flush<< " el número: "<< dato[pos-1];  
       				pos--;
       			break;
   		}     
 	}
}   

void productor(int rank){
	int num;  
	for (unsigned int i=rank;i<ITERS;i+=5){ //Itero el bucle de 5 en 5 para que, al tener 5 productores, cada uno genere 4 valores
  		num=i;				// de forma salteada (de 5 en 5, al ser 20 múltiplo de 5)
		cout<< "El Productor " << rank << " produce valor "<< num << endl << flush;
  		sleep(rand() % 2 );
  		MPI_Ssend( &value, 1, MPI_INT, Buffer, 0, MPI_COMM_WORLD ); // El productor unicamente envía mensajes síncronos al buffer
 	}								    // Dichos mensajes son los valores a recibir en el consumidor.
}

void consumidor(int rank){
 	int num,pedir=1; // creo una variable petición para pedir al buffer los valores que van a querer cada uno de nuestros consumidores
        float raiz;
 	MPI_Status status; // creamos una variable MPI para identificar de dónde procederán los mensajes y qué etiqueta tienen.
 	for (unsigned int i=0;i<ITERS/4;i++){ //Itero ahora un total de ITERS/4 veces porque 20/4 es una división entera, 5 mensajes o datos 
  		MPI_Ssend( &pedir, 1 , MPI_INT , Buffer, 4 , MPI_COMM_WORLD );  // que el consumidor va a poder pedir y va a poder recibir
  		MPI_Recv( &num, 1, MPI_INT, Buffer, 6 , MPI_COMM_WORLD,&status );
  		cout<< "El Consumidor " << rank-6 << " va a recibir el número "<<num<<endl<<flush;
  		sleep(rand() % 2 );
  		raiz=sqrt(value);
 	}
}


int main(int argc, char *argv[]) {
  	int rank,size; 
  	cout.flush();
	
  	MPI_Init( &argc, &argv );
  	MPI_Comm_rank( MPI_COMM_WORLD, &rank );  /*Inicializamos MPI*/
  	MPI_Comm_size( MPI_COMM_WORLD, &size );

  	srand ( time(NULL) ); /*Inicializamos la semilla aleatoria*/
  	if (size!=10){     /*Filtro de entrada para evitar que el programa posiblemente se quede colgado*/
		cout<< "Debes introducir exactamente 10 procesos si quieres realizar éste ejercicio."<<endl;
		return 0;
	} 
  	if (rank >= 0 && rank <=4)     /*Si el proceso que estoy utilizando es uno de los 5 primeros...*/
		productor(rank);	/*Entonces ese proceso es un productor*/
   	else if (rank>=6 && rank <=9)  /*Si por el contrario, el proceso es uno de los 4 últimos...*/
		consumidor(rank);	/*Entonces ese proceso es un consumidor*/
    	else 
		buffer(); 		/* Y, si es el proceso intermedio, entonces ese proceso, es nuestro buffer*/
  	MPI_Finalize( );
  
	return 0;
}

/37             1390520010  1000  1000  100664  3261      `
#include "mpi.h"
#include <stdlib.h>
#include <iostream>
#include <time.h>
 
using namespace std;

void Filosofo(int id, int nprocesos){  //Proceso filosofo
	int izq=(id+1)%nprocesos; //entero representativo de un tenedor izquierdo.
	int der=(id-1+nprocesos)%nprocesos; //entero representativo de un tenedor derecho.
	
	while(1){ // ejecutamos nuestro bucle infinito
		if(id == 3){  //Ordenamos que un filósofo cualquiera (3) invierta el orden de coger los cubiertos para no tener interbloqueo
			cout<<"Filosofo "<<id<< " solicita tenedor derecho "<<der <<endl<<flush;
			MPI_Ssend(&id,1,MPI_INT,der,id, MPI_COMM_WORLD);  //todos los mensajes han de ser de envío síncrono.
			cout<<"Filosofo "<<id<< " solicita tenedor izquierdo "<<izq <<endl<<flush;
			MPI_Ssend(&id,1,MPI_INT,izq,id,MPI_COMM_WORLD);
		}
		else{
			//Solicita tenedor izquierdo

			cout<<"Filosofo "<<id<< " solicita tenedor izquierdo "<<izq<<endl<<flush;
			MPI_Ssend(&id,1,MPI_INT,izq,id,MPI_COMM_WORLD );		
				
			//Solicita tenedor derecho

			cout<<"Filosofo "<<id<< " solicita tenedor derecho "<<der<<endl<<flush;
			MPI_Ssend(&id,1,MPI_INT,der,id,MPI_COMM_WORLD);
		}	
		
		cout<<"Filosofo "<<id<< " está C O M I E N D O"<<endl<<flush;
		sleep((rand() % 3)+1); //comiendo
		
		if(id == 0){  //Ordenamos que el filósofo 3 invierta el orden de soltar los cubiertos para no tener interbloqueo
			MPI_Ssend(&id, 1, MPI_INT, der, id, MPI_COMM_WORLD);
			cout<<"Filosofo "<<id<< " suelta tenedor derecho "<<der<<endl<<flush;
			MPI_Ssend(&id, 1, MPI_INT, izq, id, MPI_COMM_WORLD);
			cout<<"Filosofo "<<id<< " suelta tenedor izquierdo "<<izq<<endl<<flush;
		}
		else{	
			//suelta el tenedor izquierdo
			cout<<"Filosofo "<<id<< " suelta tenedor izquierdo "<<izq <<endl<<flush;
			MPI_Ssend(&id, 1,MPI_INT,izq, id , MPI_COMM_WORLD);
		
		
			//suelta el tenedor derecho
			cout<<"Filosofo "<<id<< " suelta tenedor derecho "<<der <<endl<<flush;
			MPI_Ssend (&id, 1, MPI_INT, der, id, MPI_COMM_WORLD);
		
		}
	
		cout<<"Filosofo "<<id<< " está P E N S A N D O"<<endl<<flush;
		sleep((rand()%3)+1 );//pensando
	}	
}

void Tenedor(int id, int nprocesos){// Proceso tenedor
	int buf; 
	MPI_Status status; 
	int Filo;
	while(1){
		// Espera un peticion desde cualquier filosofo vecino ...

		MPI_Recv(&Filo,1,MPI_INT,MPI_ANY_SOURCE,MPI_ANY_TAG,MPI_COMM_WORLD,&status);
		
		// Recibe la peticion del filosofo ...
			
		cout<<"Tenedor "<<id<<" recibe peticion de: "<<Filo<<endl<<flush;
		
		// Espera a que el filosofo suelte el tenedor...
		MPI_Recv(&buf,1,MPI_INT,status.MPI_SOURCE,status.MPI_TAG,MPI_COMM_WORLD,&status);
		cout<<"Tenenedor "<<id<<" recibe liberacion de: "<<Filo<<endl<<flush;
	}
}


int main(int argc,char** argv ){
	int rank,size;

	MPI_Init( &argc, &argv );
	MPI_Comm_rank( MPI_COMM_WORLD, &rank ); //Iniciamos MPI.
	MPI_Comm_size( MPI_COMM_WORLD, &size );

	srand(time(0)); //Inicializamos la semilla aleatoria.
	if( size!=10){ //Filtro de entrada para evitar que nuestro programa se quede colgado.
		cout<<"El numero de procesos debe ser 10"<<endl<<flush;
		MPI_Finalize( );
		return 0;
	}
	if ((rank%2) == 0) 
		Filosofo(rank,size); // Los procesos pares son Filosofos
	else 
		Tenedor(rank,size);// Los procesos impares son Tenedores
	MPI_Finalize();
	return 0;
}

/63             1390522469  1000  1000  100664  4733      `
#include "mpi.h"
#include <stdlib.h>
#include <iostream>
#include <time.h>

#define Camarero 10 //Camarero definido en el proceso 10

using namespace std;

void Filosofo(int id, int nprocesos){
   int izq=(id+1)%nprocesos;
   int der=(id-1+nprocesos)%nprocesos;
   int sentarse;
   int levantarse;

   while(1){

	//Primero siempre está pensando

	cout << "Filósofo "<<id<<" está P E N S A N D O"<<endl<<flush;
        sleep((rand()%3)+1 );		

	//Luego pregunta al camarero si se puede sentar

	cout << "Filósofo "<<id<<" pregunta al camarero si puede sentarse";
 	MPI_Ssend(&sentarse,1, MPI_INT,10, 2, MPI_COMM_WORLD); 
	
	//Una vez se ha podido sentar, solicita su tenedor izquierdo

 	cout<<"Filósofo "<<id<< " solicita tenedor izqquierdo "<<izq <<endl<<flush;
 	MPI_Ssend(&izq,1, MPI_INT,izq,0,MPI_COMM_WORLD);
 	cout << "Filósofo " << id << " coge el tenedor izquierdo " << izq << endl << flush;
      
	//y ahora pues el drecho
      
	cout<<"Filosofo "<<id<< " solicita tenedor derecho "<<der <<endl<<flush;
 	MPI_Ssend(&der,1, MPI_INT, der, 0, MPI_COMM_WORLD); 
 	cout<<"Filosofo "<<id<< " coge tenedor derecho "<<der <<endl<<flush;
	
	//Ahora se pone a comer	
	
 	cout<<"Filosofo "<<id<< " está C O M I E N D O"<<endl<<flush;
 	sleep((rand() % 3)+1);
      
	//Devuelve el tenedor izquierdo
      
	cout<<"Filosofo "<<id<< " suelta tenedor izquierdo "<<izq <<endl<<flush;
 	MPI_Ssend(&izq,1, MPI_INT,izq, 1, MPI_COMM_WORLD);
      
	//Y ahora devuelve el derecho

 	MPI_Ssend(&der,1, MPI_INT, der, 1, MPI_COMM_WORLD); 
 	cout <<"Filosofo "<<id<<" suelta tenedor derecho "<<der<<endl<<flush;

	//Y, para terminar, se levanta de la mesa y se va.

 	cout <<"Filosofo "<<id<<" decide levantarse de la mesa";
 	MPI_Ssend(&levantarse,1, MPI_INT, 10, 3, MPI_COMM_WORLD); //envía un mensaje ÚNICAMENTE al proceso 10, es decir, al CAMARERO con
	}                                                         // etiqueta 3
}



void Tenedor (int id, int nprocesos){
   int buf; MPI_Status status; int Filo;

   while(1){
 	// Espera un peticion desde cualquier ﬁlosofo vecino ...

 	MPI_Probe(MPI_ANY_SOURCE,MPI_ANY_TAG, MPI_COMM_WORLD,&status); 

 	// Recibe la peticion del ﬁlosofo ...

 	MPI_Recv(&buf,1,MPI_INT,MPI_ANY_SOURCE,0,MPI_COMM_WORLD,&status);
 	cout<<"Proceso tenedor --> ("<<id<<") recibe peticion del filosofo --> "<<status.MPI_SOURCE <<endl<<flush;

 	// Espera a que el ﬁlosofo suelte el tenedor...

 	MPI_Recv(&buf,1,MPI_INT,MPI_ANY_SOURCE,1,MPI_COMM_WORLD,&status);
        cout<<"Proceso tenedor --> ("<<id<<") recibe la liberacion  del filosofo --> ("<<status.MPI_SOURCE<<")" << endl<<flush;
   }

}

void Camarero(int id, int nprocesos){
	int permiso,size; 
	MPI_Status status; 
	int Filo,flag;
	int num_silla=1;

	while(true){
		//Espera una peticion de sentarse a cualquier filosofo..
		if((num_silla<=4)){
			MPI_Probe(MPI_ANY_SOURCE,2, MPI_COMM_WORLD,&status);
			cout << "El camarero ve si la mesa está vacía, sillas ocupadas = "<< num_silla-1 <<", tope = 4" << endl << flush;
          		MPI_Recv(&permiso,1,MPI_INT,MPI_ANY_SOURCE,2,MPI_COMM_WORLD,&status); //filósofo que envió el mensaje de permiso
          		cout << "El camarero deja sentarse al filósofo" << status.MPI_SOURCE <<endl<<flush;
          		num_silla++;
          		MPI_Iprobe(MPI_ANY_SOURCE,3,MPI_COMM_WORLD,&flag,&status);
			
          		if(flag>1){
             			MPI_Recv(&permiso,1,MPI_INT,MPI_ANY_SOURCE,3,MPI_COMM_WORLD,&status);
             			cout << "El camarero ayuda a levantarse de la mesa al filósofo "<< status.MPI_SOURCE <<endl<<flush;
             			num_silla--;
          		}
       		}  
       		else {
          		cout << "La mesa está al completo, vuelva más tarde.";
          		MPI_Probe(MPI_ANY_SOURCE,3, MPI_COMM_WORLD,&status);
			
          		MPI_Recv(&permiso,1,MPI_INT,MPI_ANY_SOURCE,3,MPI_COMM_WORLD,&status);
          		cout << "El camarero ayuda a levantarse de la mesa al filósofo "<< status.MPI_SOURCE <<endl<<flush;
          		num_silla--;
      		}
   	}
}

int main(int argc,char** argv ){
	int rank,size;
   
	MPI_Init( &argc, &argv );                    //Inicializo MPI
	MPI_Comm_rank( MPI_COMM_WORLD, &rank );
	MPI_Comm_size( MPI_COMM_WORLD, &size );

	srand(time(0)); //Inicializo la semilla aleatoria.

   	if( size!=11){ 
     		cout<<"El numero de procesos debe ser 10"<<endl<<flush;
      		MPI_Finalize( ); 
   		return 0;
  	}

   	if (((rank<10) && (rank%2) == 0)) 
		Filosofo(rank,size-1); // Los procesos pares son Filosofos
   	else if(((rank<10) && (rank%2) != 0))
		Tenedor(rank,size-1); // Los procesos impares son Tenedores
   	else { 
      		Camarero(rank,size); // El proceso 10 para uso exclusivo del camarero
   }

   MPI_Finalize();
   return 0;
}


