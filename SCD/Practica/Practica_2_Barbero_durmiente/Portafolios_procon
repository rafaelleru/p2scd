PORTAFOLIOS EXPLICATIVO DEL PROGRAMA DEL PRODUCTOR-CONSUMIDOR (DEL MONITOR)

Añado en la clase Buffer como herencia la clase AbstractMonitor donde comienzo creando 4 variables de instancia privadas donde la primera
es un entero, el segundo un buffer nulo y como tercero y cuarto 2 variables de tipo Condition para poder indicar la cola de procesos ocupados
de lo que nos pide el ejercicio de forma intuitiva por los nombre que denotamos.

Seguidamente definimos las funciones que llevarán a cabo nuestras hebras con los procesos tomados de herencia de la clase AbstractMonitor:

La función buffer se inicia con un parámetro entero el cual indica cual es el tamaño del vector para ésta llamada a dicha función, cuyo
vector irá conteniendo los objetos volcados por el productor del ejercicio y dichos objetos irán siendo consumidos por el consumidor
propiamente dicho. Simplemente lo que hago es reservar memoria, es decir, construir un buffer de tamaño exactamente igual al tamaño del
vector aportado.PORTAFOLIOS EXPLICATIVO DEL PROGRAMA DEL BARBERO (DEL MONITOR)

La función depositar como intuitivamente parece, es llamada por la hebra productora para colocar en nuestro vector el objeto deseado,
en el caso de que así se pueda colocar (ahora más adelante lo explico mejor). Primeramente la función es llamada con un parámetro, el cual
indica lo que será el objeto colocado por el productor dentro del vector. Seguidamente se comprueba que si el contador de colocación de
objetos de nuestro vector es exactamente igual al tamaño total de nuestro vector, nuestro vector se encuentra totalmente lleno, luego
por el momento no podemos seguir produciendo más productos, así que le indicamos a nuestro productor que se espere (hasta que nuestros
consumidores consuman algún producto y vuelvan a desbloquear al productor para que siga produciendo items) con un await. Si dicha condición
no se cumple simplemente en la posición del vector en la que nos encontramos con nuestra variable contadora, se rellena con el valor que ha
sido llamada la función (nuestro producto) y se le indica a nuestro consumidor que puede empezar a consumir, se desbloquea.

Por último la función extraer no necesita ninguna variable para ser llamada pero ha de devolver un double, en éste caso, el producto que
sustrae el consumidor del vector de productos del consumidor. Para ello primeramente pregunta si la variable contadora del vector es igual
a 0, es decir, nos encontramos en la primera posición del vector, el cual TODAVÍA no ha sido rellenado, luego nuestro consumidor NO puede
consumir nada, dado que no hay nada que consumir, en ese caso, bloqueamos a nuestro consumidor. Por el contrario, dicha variable contadora
decrece en una unidad ya que vamos a sustraer dicho dato del vector de productos del productor y le indicamos a nuestro productir que puede
seguir produciendo más productos.

En las anteriores funciones siempre colocamos al principio y al final de cada una de ellas un enter() y un leave() para poder entrar al monitor y que éste se pueda comunicar con el exterior.

Para la implementación de las hebras en Java incluyo directamente todo el código del programa (incluído del monitor) para terminar
el portafolios:

import monitor.* ;
class Buffer extends AbstractMonitor{ 
  private int numSlots = 0, cont = 0;   
  private double[] buffer = null;
  private Condition producir   = makeCondition();
  private Condition consumir = makeCondition();


  public Buffer( int p_numSlots ) 
  { 
    enter();
    numSlots = p_numSlots ; 
    buffer = new double[numSlots] ;
    leave();
  }

  public void depositar( double valor )  
  {        
    enter();
    if( cont == numSlots ) producir.await();              
    buffer[cont] = valor; cont++; 
    //notifyAll();     
    consumir.signal(); 
    leave(); 
  }
  public double extraer() 
{
    enter();
    double valor;
    if( cont == 0 ) consumir.await();
    cont--; valor = buffer[cont] ;
    //notifyAll();
    producir.signal();
    leave();
    return valor;
  }
}

class Productor implements Runnable
{ private Buffer bb ;
  int veces; 
  int numP ;
  Thread thr ;
  public Productor( Buffer pbb, int pveces, int pnumP ) 
  { bb    = pbb;
    veces = pveces;
    numP  = pnumP ;
    thr   = new Thread(this,"productor "+numP);
  }
  public void run() 
    { 
	double item = 100*numP ;
	      for( int i=0 ; i<veces ; i++ )
	      { System.out.println(thr.getName()+", produciendo " + item);
		bb.depositar( item++ );
	      }
	} 
 }
class Consumidor implements Runnable 
{ private Buffer bb ;
  int veces; 
  int numC ;
  Thread thr ;
  public Consumidor( Buffer pbb, int pveces, int pnumC ) 
  { bb    = pbb;
    veces = pveces;
    numC  = pnumC ;
    thr   = new Thread(this,"consumidor "+numC);
  }
  public void run() 
  { 
	for( int i=0 ; i<veces ; i++ )
	      { double item = bb.extraer ();
		System.out.println(thr.getName()+", consumiendo "+item);
	      } 
  }
}
class EjemploProductorConsumidor 
{ public static void main( String[] args ) 
  { if ( args.length != 5 ) 
//ncons=num consumidores, nprod=num productores, tambuf=tamaño buffer, niterp
    {  System.err.println("Uso: ncons nprod tambuf niterc niterp");
       return ;
    }
    // leer parametros, crear vectores y buffer intermedio
    Consumidor[] cons = new Consumidor[Integer.parseInt(args[0])] ;
	  Productor[]  prod = new Productor[Integer.parseInt(args[1])] ;
	  Buffer buffer = new Buffer(Integer.parseInt(args[2]));
	  int iter_cons = Integer.parseInt(args[3]);
	  int iter_prod = Integer.parseInt(args[4]);
	  if ( cons.length*iter_cons != prod.length*iter_prod )
	  { System.err.println("no coinciden número de items a producir con a cosumir");
      return ;
    }    
	  // crear hebras
	  for(int i = 0; i < cons.length; i++) 
	    cons[i] = new Consumidor(buffer,iter_cons,i) ;
	  for(int i = 0; i < prod.length; i++)
	    prod[i] = new Productor(buffer,iter_prod,i) ;
	  // poner en marcha las hebras
	  for(int i = 0; i < prod.length; i++) prod[i].thr.start();
	  for(int i = 0; i < cons.length; i++) cons[i].thr.start();
  }
}

