import monitor.* ;
import java.util.Random;

class Estanco extends AbstractMonitor {
   private int ingrediente=-1; //Inicialmente mesa vacia
   private Condition obtener_tabaco=makeCondition();
   private Condition obtener_cerillas=makeCondition();
   private Condition obtener_papel=makeCondition();
   private Condition espera_estanquero= makeCondition();  

   public void obtenerIngrediente(int Ingrediente){
      enter();
      if(this.ingrediente!=Ingrediente){
        if(Ingrediente==0){
            System.out.println("El fumador 1 espera tabaco");
            obtener_tabaco.await();
         }
         else if(Ingrediente==1){
            System.out.println("El fumador 2 espera cerillas");
            obtener_cerillas.await();
         }
         else{
             System.out.println("El fumador 3 espera papel");
             obtener_papel.await();
         }
      }    
      if(this.ingrediente==Ingrediente){
        if(Ingrediente==0){
            System.out.println("El fumador 1 recoge tabaco");
         }
         else if(Ingrediente==1){
            System.out.println("El fumador 2 recoge cerillas");
         }
         else{
             System.out.println("El fumador 3 recoge papel");
         }
      }    

      ingrediente=-1;
      espera_estanquero.signal();
      leave();  
   }

   public void ponerIngrediente(int ingrediente){ 
       enter();
       this.ingrediente=ingrediente;
       if(this.ingrediente==0) obtener_tabaco.signal();
       if(this.ingrediente==1) obtener_cerillas.signal();
       if(this.ingrediente==2) obtener_papel.signal();
       leave();
   }
   /*
   private Condition obtener_tabaco=makeCondition();
   private Condition obtener_cerillas=makeCondition();
   private Condition obtener_papel=makeCondition();
   */
   public void esperarRecogidaIngrediente(){
       enter();

       if (ingrediente!=-1) espera_estanquero.await();
       System.out.println("El estanquero encuentra mesa vacia ....");
       leave();
   }

}

class Fumadores implements Runnable {
   int mi_Ingrediente;
   public Thread thr;
   Estanco estanco;

   public Fumadores( int p_miIngrediente, String nombre, Estanco estanco){
      this.mi_Ingrediente=p_miIngrediente;
      thr = new Thread(this,nombre);
      this.estanco=estanco;
   }

   public void run(){
      while(true){
         estanco.obtenerIngrediente( mi_Ingrediente );
      }
   }
}

class Estanquero implements Runnable {
   public Thread thr;
   aux aux;
   Estanco estanco;

   public Estanquero(Estanco estanco){
      thr = new Thread(this,"Estanco pepito");
      this.estanco=estanco;
   }
   public void run() {
      int ingrediente;
      while(true){
         ingrediente = (int) (Math.random () * 3.0);
         System.out.println("Numero generado --> " + ingrediente);
         estanco.ponerIngrediente(ingrediente);
         aux.dormir_max(9999);
         estanco.esperarRecogidaIngrediente();
      }
   }
}

class aux{
  static Random genAlea = new Random() ;
  static void dormir_max( int milisecsMax )
  { try
    { Thread.sleep( genAlea.nextInt( milisecsMax ) ) ;
    } 
    catch( InterruptedException e )
    { System.err.println("sleep interumpido en 'aux.dormir_max()'");
    }
  }
}

class EjemploFumadores { 
   public static void main( String[] args ) throws InterruptedException { 
      Fumadores[] fumadores=new Fumadores[3];
      Estanco estanco = new Estanco();
      Estanquero estanquero= new Estanquero(estanco);
      

      estanquero.thr.start();
      for(int i=0; i<3; i++){
         fumadores[i]=new Fumadores(i,"Fumador"+1,estanco);
         fumadores[i].thr.start();
      }

      estanquero.thr.join();

      for(int i=0; i<3; i++){
         fumadores[i].thr.join();
      }
   }
}
